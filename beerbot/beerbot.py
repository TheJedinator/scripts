
"""
Slack chat-bot Lambda handler.
"""

import os
import logging
import urllib
import requests
import datetime
import json
from bs4 import BeautifulSoup

# Grab the Bot OAuth token from the environment.
BOT_TOKEN = os.environ["BOT_TOKEN"]
SECRET = os.environ["UNTAPD_SECRET"]
ID = os.environ["UNTAPD_ID"]

# Define the URL of the targeted Slack API resource.
# We'll send our replies there.
SLACK_URL = "https://slack.com/api/chat.postMessage"


def lambda_handler(data, context):
    """Handle an incoming HTTP request from a Slack chat-bot.
    """
    # Grab the Slack event data.
    slack_event = data["event"]

    # We need to discriminate between events generated by
    # the users, which we want to process and handle,
    # and those generated by the bot.
    if "bot_id" in slack_event:
        logging.warn("Ignore bot event")
    else:
        # Get the text of the message the user sent to the bot
        text = slack_event["text"]
        response = ""
        text = text.lower()
        if "create poll" in text:
            response = create_poll()
        # Send friendly message if it's not our only command
        else:
            response = "I'm sorry the only command I know is `create poll`, you should try that instead....."

        # Get the ID of the channel where the message was posted.
        channel_id = slack_event["channel"]

        # We need to send back three pieces of information:
        #     1. The reply text
        #     2. The channel id of the private, direct chat (channel)
        #     3. The OAuth token required to communicate with
        #        the API (token)
        # Then, create an associative array and URL-encode it,
        # since the Slack API doesn't not handle JSON (bummer).
        data = urllib.parse.urlencode(
            (
                ("token", BOT_TOKEN),
                ("channel", channel_id),
                ("text", response)
            )
        )
        data = data.encode("ascii")

        # Construct the HTTP request that will be sent to the Slack API.
        request = urllib.request.Request(
            SLACK_URL,
            data=data,
            method="POST"
        )
        # Add a header mentioning that the text is URL-encoded.
        request.add_header(
            "Content-Type",
            "application/x-www-form-urlencoded"
        )

        # Fire off the request!
        urllib.request.urlopen(request).read()

    # Everything went fine.
    return "200 OK"


def create_poll():
    req = requests.get('https://www.anbl.com/growlers')
    data = req.content
    soup = BeautifulSoup(data, 'html.parser')
    york_fred = soup.find(
        'div', attrs={'class': 'widget', 'data-type': 'view', 'data-index': '3'})
    # print(york_fred.prettify())
    test_list = []

    for bt in york_fred.find_all('strong'):
        x = bt.get_text().strip()
        if x != "":
            # print(x)
            test_list.append(x)
    polly_str = ""
    date = datetime.date.today().strftime('%B %d, %Y')
    if len(test_list) <= 0:
        polly_str = "Either the ANBL Devs forgot how to use p-tags again OR there is a special event, I'm not that smart, you'll have to manage on your own today....... https://www.anbl.com/growlers"
    else:
        polly_str = '/polly "On Tap - {}"'.format(date)

    # For each beer, make a request to the untapped API for some info
    # If the request succeeds we add info & beer to the poll, otherwise we just add the beer to the poll
    for beer in test_list:
        # print(beer)
        api_str = """ https://api.untappd.com/v4/search/beer?q={}&client_id={}&client_secret={}""".format(beer, ID, SECRET)
        res = requests.get(api_str)
        res = json.loads(res.content)
        beer_str = None
        if res.get('status_code') == 200 or res.get('meta').get('code') == 200:
            search_results = res.get('response').get('beers').get('items')
            if search_results: 
                sr = search_results[0]
                sr = sr['beer']
                beer_str = """
                Style: {}
                IBU: {}
                ABV: {}
                Description: {}
                """.format(
                    sr['beer_style'].strip(),
                    sr['beer_ibu'],
                    sr['beer_abv'],
                    sr['beer_description'].strip()
                )
            if beer_str: 
                polly_str += ' "{}{}"'.format(beer, beer_str)
            else: polly_str += '"{}"'.format(beer)
    # print(polly_str)
    return polly_str 
